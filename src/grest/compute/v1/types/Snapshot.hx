package grest.compute.v1.types;
typedef Snapshot = {
	/**
		[Output Only] Set to true if snapshots are automatically created by applying resource policy on the target disk.
	**/
	@:optional
	var autoCreated : Bool;
	/**
		Creates the new snapshot in the snapshot chain labeled with the specified name. The chain name must be 1-63 characters long and comply with RFC1035. This is an uncommon option only for advanced service owners who needs to create separate snapshot chains, for example, for chargeback tracking. When you describe your snapshot resource, this field is visible only if it has a non-empty value.
	**/
	@:optional
	var chainName : String;
	/**
		[Output Only] Creation timestamp in RFC3339 text format.
	**/
	@:optional
	var creationTimestamp : String;
	/**
		An optional description of this resource. Provide this property when you create the resource.
	**/
	@:optional
	var description : String;
	/**
		[Output Only] Size of the source disk, specified in GB.
	**/
	@:optional
	var diskSizeGb : String;
	/**
		[Output Only] Number of bytes downloaded to restore a snapshot to a disk.
	**/
	@:optional
	var downloadBytes : String;
	/**
		[Output Only] The unique identifier for the resource. This identifier is defined by the server.
	**/
	@:optional
	var id : String;
	/**
		[Output Only] Type of the resource. Always compute#snapshot for Snapshot resources.
	**/
	@:optional
	var kind : String;
	/**
		A fingerprint for the labels being applied to this snapshot, which is essentially a hash of the labels set used for optimistic locking. The fingerprint is initially generated by Compute Engine and changes after every request to modify or update labels. You must always provide an up-to-date fingerprint hash in order to update or change labels, otherwise the request will fail with error 412 conditionNotMet.
		
		To see the latest fingerprint, make a get() request to retrieve a snapshot.
	**/
	@:optional
	var labelFingerprint : String;
	/**
		Labels to apply to this snapshot. These can be later modified by the setLabels method. Label values may be empty.
	**/
	@:optional
	var labels : haxe.DynamicAccess<String>;
	/**
		[Output Only] Integer license codes indicating which licenses are attached to this snapshot.
	**/
	@:optional
	var licenseCodes : Array<String>;
	/**
		[Output Only] A list of public visible licenses that apply to this snapshot. This can be because the original image had licenses attached (such as a Windows image).
	**/
	@:optional
	var licenses : Array<String>;
	/**
		An opaque location hint used to place the snapshot close to other resources. This field is for use by internal tools that use the public API.
	**/
	@:optional
	var locationHint : String;
	/**
		Name of the resource; provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?` which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.
	**/
	@:optional
	var name : String;
	/**
		[Output Only] Reserved for future use.
	**/
	@:optional
	var satisfiesPzs : Bool;
	/**
		[Output Only] Server-defined URL for the resource.
	**/
	@:optional
	var selfLink : String;
	/**
		Encrypts the snapshot using a customer-supplied encryption key.
		
		After you encrypt a snapshot using a customer-supplied key, you must provide the same key if you use the snapshot later. For example, you must provide the encryption key when you create a disk from the encrypted snapshot in a future request.
		
		Customer-supplied encryption keys do not protect access to metadata of the snapshot.
		
		If you do not provide an encryption key when creating the snapshot, then the snapshot will be encrypted using an automatically generated key and you do not need to provide a key to use the snapshot later.
	**/
	@:optional
	var snapshotEncryptionKey : CustomerEncryptionKey;
	/**
		The source disk used to create this snapshot.
	**/
	@:optional
	var sourceDisk : String;
	/**
		The customer-supplied encryption key of the source disk. Required if the source disk is protected by a customer-supplied encryption key.
	**/
	@:optional
	var sourceDiskEncryptionKey : CustomerEncryptionKey;
	/**
		[Output Only] The ID value of the disk used to create this snapshot. This value may be used to determine whether the snapshot was taken from the current or a previous instance of a given disk name.
	**/
	@:optional
	var sourceDiskId : String;
	/**
		[Output Only] The status of the snapshot. This can be CREATING, DELETING, FAILED, READY, or UPLOADING.
	**/
	@:optional
	var status : grest.compute.v1.types.Snapshot_status;
	/**
		[Output Only] A size of the storage used by the snapshot. As snapshots share storage, this number is expected to change with snapshot creation/deletion.
	**/
	@:optional
	var storageBytes : String;
	/**
		[Output Only] An indicator whether storageBytes is in a stable state or it is being adjusted as a result of shared storage reallocation. This status can either be UPDATING, meaning the size of the snapshot is being updated, or UP_TO_DATE, meaning the size of the snapshot is up-to-date.
	**/
	@:optional
	var storageBytesStatus : grest.compute.v1.types.Snapshot_storageBytesStatus;
	/**
		Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
	**/
	@:optional
	var storageLocations : Array<String>;
}
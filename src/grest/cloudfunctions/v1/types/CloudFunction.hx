package grest.cloudfunctions.v1.types;
typedef CloudFunction = {
	/**
		The amount of memory in MB available for a function. Defaults to 256MB.
	**/
	@:optional
	var availableMemoryMb : Int;
	/**
		Build environment variables that shall be available during build time.
	**/
	@:optional
	var buildEnvironmentVariables : haxe.DynamicAccess<String>;
	/**
		Output only. The Cloud Build ID of the latest successful deployment of the function.
	**/
	@:optional
	var buildId : String;
	/**
		Name of the Cloud Build Custom Worker Pool that should be used to build the function. The format of this field is `projects/{project}/locations/{region}/workerPools/{workerPool}` where {project} and {region} are the project id and region respectively where the worker pool is defined and {workerPool} is the short name of the worker pool. If the project id is not the same as the function, then the Cloud Functions Service Agent (service-@gcf-admin-robot.iam.gserviceaccount.com) must be granted the role Cloud Build Custom Workers Builder (roles/cloudbuild.customworkers.builder) in the project.
	**/
	@:optional
	var buildWorkerPool : String;
	/**
		User-provided description of a function.
	**/
	@:optional
	var description : String;
	/**
		The name of the function (as defined in source code) that will be executed. Defaults to the resource name suffix, if not specified. For backward compatibility, if function with given name is not found, then the system will try to use function named "function". For Node.js this is name of a function exported by the module specified in `source_location`.
	**/
	@:optional
	var entryPoint : String;
	/**
		Environment variables that shall be available during function execution.
	**/
	@:optional
	var environmentVariables : haxe.DynamicAccess<String>;
	/**
		A source that fires events in response to a condition in another service.
	**/
	@:optional
	var eventTrigger : EventTrigger;
	/**
		An HTTPS endpoint type of source that can be triggered via URL.
	**/
	@:optional
	var httpsTrigger : HttpsTrigger;
	/**
		The ingress settings for the function, controlling what traffic can reach it.
	**/
	@:optional
	var ingressSettings : grest.cloudfunctions.v1.types.CloudFunction_ingressSettings;
	/**
		Labels associated with this Cloud Function.
	**/
	@:optional
	var labels : haxe.DynamicAccess<String>;
	/**
		The limit on the maximum number of function instances that may coexist at a given time. In some cases, such as rapid traffic surges, Cloud Functions may, for a short period of time, create more instances than the specified max instances limit. If your function cannot tolerate this temporary behavior, you may want to factor in a safety margin and set a lower max instances value than your function can tolerate. See the [Max Instances](https://cloud.google.com/functions/docs/max-instances) Guide for more details.
	**/
	@:optional
	var maxInstances : Int;
	/**
		A user-defined name of the function. Function names must be unique globally and match pattern `projects/*/locations/*/functions/*`
	**/
	@:optional
	var name : String;
	/**
		The VPC Network that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network resource. If the short network name is used, the network must belong to the same project. Otherwise, it must belong to a project within the same organization. The format of this field is either `projects/{project}/global/networks/{network}` or `{network}`, where {project} is a project id where the network is defined, and {network} is the short name of the network. This field is mutually exclusive with `vpc_connector` and will be replaced by it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
	**/
	@:optional
	var network : String;
	/**
		The runtime in which to run the function. Required when deploying a new function, optional when updating an existing function. For a complete list of possible choices, see the [`gcloud` command reference](/sdk/gcloud/reference/functions/deploy#--runtime).
	**/
	@:optional
	var runtime : String;
	/**
		The email of the function's service account. If empty, defaults to `{project_id}@appspot.gserviceaccount.com`.
	**/
	@:optional
	var serviceAccountEmail : String;
	/**
		The Google Cloud Storage URL, starting with gs://, pointing to the zip archive which contains the function.
	**/
	@:optional
	var sourceArchiveUrl : String;
	/**
		**Beta Feature** The source repository where a function is hosted.
	**/
	@:optional
	var sourceRepository : SourceRepository;
	/**
		Input only. An identifier for Firebase function sources. Disclaimer: This field is only supported for Firebase function deployments.
	**/
	@:optional
	var sourceToken : String;
	/**
		The Google Cloud Storage signed URL used for source uploading, generated by google.cloud.functions.v1.GenerateUploadUrl
	**/
	@:optional
	var sourceUploadUrl : String;
	/**
		Output only. Status of the function deployment.
	**/
	@:optional
	var status : grest.cloudfunctions.v1.types.CloudFunction_status;
	/**
		The function execution timeout. Execution is considered failed and can be terminated if the function is not completed at the end of the timeout period. Defaults to 60 seconds.
	**/
	@:optional
	var timeout : String;
	/**
		Output only. The last update timestamp of a Cloud Function.
	**/
	@:optional
	var updateTime : String;
	/**
		Output only. The version identifier of the Cloud Function. Each deployment attempt results in a new version of a function being created.
	**/
	@:optional
	var versionId : String;
	/**
		The VPC Network Connector that this cloud function can connect to. It can be either the fully-qualified URI, or the short name of the network connector resource. The format of this field is `projects/*/locations/*/connectors/*` This field is mutually exclusive with `network` field and will eventually replace it. See [the VPC documentation](https://cloud.google.com/compute/docs/vpc) for more information on connecting Cloud projects.
	**/
	@:optional
	var vpcConnector : String;
	/**
		The egress settings for the connector, controlling what traffic is diverted through it.
	**/
	@:optional
	var vpcConnectorEgressSettings : grest.cloudfunctions.v1.types.CloudFunction_vpcConnectorEgressSettings;
}
package grest.discovery.v1.types;
typedef JsonSchema = {
	/**
		A reference to another schema. The value of this property is the "id" of another schema.
	**/
	@:optional
	var $ref : String;
	/**
		If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object.
	**/
	@:optional
	var additionalProperties : JsonSchema;
	/**
		Additional information about this property.
	**/
	@:optional
	var annotations : { var required : Array<String>; };
	/**
		The default value of this property (if one exists).
	**/
	@:optional
	var default : String;
	/**
		A description of this object.
	**/
	@:optional
	var description : String;
	/**
		Values this parameter may take (if it is an enum).
	**/
	@:optional
	var enum : Array<String>;
	/**
		The descriptions for the enums. Each position maps to the corresponding value in the "enum" array.
	**/
	@:optional
	var enumDescriptions : Array<String>;
	/**
		An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
	**/
	@:optional
	var format : String;
	/**
		Unique identifier for this schema.
	**/
	@:optional
	var id : String;
	/**
		If this is a schema for an array, this property is the schema for each element in the array.
	**/
	@:optional
	var items : JsonSchema;
	/**
		Whether this parameter goes in the query or the path for REST requests.
	**/
	@:optional
	var location : String;
	/**
		The maximum value of this parameter.
	**/
	@:optional
	var maximum : String;
	/**
		The minimum value of this parameter.
	**/
	@:optional
	var minimum : String;
	/**
		The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
	**/
	@:optional
	var pattern : String;
	/**
		If this is a schema for an object, list the schema for each property of this object.
	**/
	@:optional
	var properties : haxe.DynamicAccess<JsonSchema>;
	/**
		The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service.
	**/
	@:optional
	var readOnly : Bool;
	/**
		Whether this parameter may appear multiple times.
	**/
	@:optional
	var repeated : Bool;
	/**
		Whether the parameter is required.
	**/
	@:optional
	var required : Bool;
	/**
		The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
	**/
	@:optional
	var type : String;
	/**
		In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names.
	**/
	@:optional
	var variant : { var discriminant : String; var map : Array<{ var $ref : String; var type_value : String; }>; };
}
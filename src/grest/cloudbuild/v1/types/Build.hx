package grest.cloudbuild.v1.types;
typedef Build = {
	/**
		Artifacts produced by the build that should be uploaded upon successful completion of all build steps.
	**/
	@:optional
	var artifacts : Artifacts;
	/**
		Secrets and secret environment variables.
	**/
	@:optional
	var availableSecrets : Secrets;
	/**
		Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
	**/
	@:optional
	var buildTriggerId : String;
	/**
		Output only. Time at which the request to create the build was received.
	**/
	@:optional
	var createTime : String;
	/**
		Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
	**/
	@:optional
	var finishTime : String;
	/**
		Output only. Unique identifier of the build.
	**/
	@:optional
	var id : String;
	/**
		A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
	**/
	@:optional
	var images : Array<String>;
	/**
		Output only. URL to logs for this build in Google Cloud Console.
	**/
	@:optional
	var logUrl : String;
	/**
		Google Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
	**/
	@:optional
	var logsBucket : String;
	/**
		Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
	**/
	@:optional
	var name : String;
	/**
		Special options for this build.
	**/
	@:optional
	var options : BuildOptions;
	/**
		Output only. ID of the project.
	**/
	@:optional
	var projectId : String;
	/**
		TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
	**/
	@:optional
	var queueTtl : String;
	/**
		Output only. Results of the build.
	**/
	@:optional
	var results : Results;
	/**
		Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
	**/
	@:optional
	var secrets : Array<Secret>;
	/**
		IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
	**/
	@:optional
	var serviceAccount : String;
	/**
		The location of the source files to build.
	**/
	@:optional
	var source : Source;
	/**
		Output only. A permanent fixed identifier for source.
	**/
	@:optional
	var sourceProvenance : SourceProvenance;
	/**
		Output only. Time at which execution of the build was started.
	**/
	@:optional
	var startTime : String;
	/**
		Output only. Status of the build.
	**/
	@:optional
	var status : grest.cloudbuild.v1.types.Build_status;
	/**
		Output only. Customer-readable message about the current status.
	**/
	@:optional
	var statusDetail : String;
	/**
		Required. The operations to be performed on the workspace.
	**/
	@:optional
	var steps : Array<BuildStep>;
	/**
		Substitutions data for `Build` resource.
	**/
	@:optional
	var substitutions : haxe.DynamicAccess<String>;
	/**
		Tags for annotation of a `Build`. These are not docker tags.
	**/
	@:optional
	var tags : Array<String>;
	/**
		Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is ten minutes.
	**/
	@:optional
	var timeout : String;
	/**
		Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps * PUSH: time to push all specified images. * FETCHSOURCE: time to fetch source. If the build does not specify source or images, these keys will not be included.
	**/
	@:optional
	var timing : haxe.DynamicAccess<TimeSpan>;
	/**
		Output only. Non-fatal problems encountered during the execution of the build.
	**/
	@:optional
	var warnings : Array<Warning>;
}